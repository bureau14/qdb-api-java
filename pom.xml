<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.b14.qdb</groupId>
	<artifactId>qdb-api</artifactId>
	<version>${api-version}</version>
	<name>quasardb Java API</name>
	<description>High level java client API</description>

	<url>https://www.quasardb.fr/</url>

	<licenses>
		<license>
			<name>Bureau 14 quasardb license</name>
			<url>https://www.quasardb.net/</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<mailingLists>
		<mailingList>
			<name>Information</name>
			<post>contact@bureau14.fr</post>
		</mailingList>
		<mailingList>
			<name>Sales</name>
			<post>sales@bureau14.fr</post>
		</mailingList>
		<mailingList>
			<name>Bugs</name>
			<post>bugs@quasardb.net</post>
		</mailingList>
	</mailingLists>

	<issueManagement>
		<system>Fogbugz</system>
		<url>https://bureau14.fogbugz.com/default.asp</url>
	</issueManagement>

	<organization>
		<name>quasardb</name>
		<url>http://www.quasardb.fr</url>
	</organization>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<powermock.version>1.6.0</powermock.version>
		<cglib.version>2.2.2</cglib.version>
		<kryo.version>3.0.0</kryo.version>
		<kryo.serializers.version>0.27</kryo.serializers.version>
		<junit.version>4.11</junit.version>
		<contiperf.version>2.1.0</contiperf.version>
		<feed4junit.version>0.6.6</feed4junit.version>
		<log4j.version>1.2.17</log4j.version>
		<slf4j.version>1.7.7</slf4j.version>
		<findbugs.version>3.0.0</findbugs.version>
	</properties>

	<repositories>
		<repository>
			<id>maven.jahia.org</id>
			<name>maven.jahia.org Repository</name>
			<url>https://www.escidoc.org/artifactory/maven.jahia.org/</url>
		</repository>
		<repository>
			<id>repository.sonatype.org</id>
			<name>repository.sonatype.org Repository</name>
			<url>https://repository.sonatype.org/</url>
		</repository>
		<repository>
            <id>cloudbees-snapshots</id>
            <name>cloudbees-snapshots</name>
            <url>https://repository-jsr107.forge.cloudbees.com/snapshot</url>
        </repository>
	</repositories>

	<dependencies>
		<!-- Add dependency to the kryo serialization framework -->
		<dependency>
			<groupId>com.esotericsoftware</groupId>
			<artifactId>kryo-shaded</artifactId>
			<version>${kryo.version}</version>
			<scope>compile</scope>
			<exclusions>
				<exclusion>
					<groupId>com.esotericsoftware.reflectasm</groupId>
					<artifactId>reflectasm</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.esotericsoftware.minlog</groupId>
					<artifactId>minlog</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.objenesis</groupId>
                	<artifactId>objenesis</artifactId>
            	</exclusion>
			</exclusions>
		</dependency>

		<!-- Provide some others serializers to the kryo serialization framework -->
		<dependency>
			<groupId>de.javakaffee</groupId>
			<artifactId>kryo-serializers</artifactId>
			<version>${kryo.serializers.version}</version>
		</dependency>
		
		<!-- Add dependency to jsr107 - jcache -->
		<!-- <dependency>
            <groupId>javax.cache</groupId>
            <artifactId>cache-api</artifactId>
            <version>0.7-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>javax.enterprise</groupId>
            <artifactId>cdi-api</artifactId>
            <version>1.0-SP4</version>
        </dependency> -->
		
		<!-- Add dependency to the junit framework - Unit Testing tools -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.databene</groupId>
			<artifactId>contiperf</artifactId>
			<version>${contiperf.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.databene</groupId>
			<artifactId>feed4junit</artifactId>
			<version>${feed4junit.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- Add dependency to JSON parsing library - Unit Tests -->
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-jaxrs</artifactId>
			<version>1.9.13</version>
			<scope>test</scope>
		</dependency>
		
		<!-- Add dependency to the mock framework - TU -->
	   <dependency>
	      	<groupId>org.powermock</groupId>
	      	<artifactId>powermock-module-junit4</artifactId>
	      	<version>${powermock.version}</version>
	   		<scope>test</scope>
	   </dependency>
	   <dependency>
      		<groupId>org.powermock</groupId>
      		<artifactId>powermock-api-mockito</artifactId>
      		<version>${powermock.version}</version>
      		<scope>test</scope>
   		</dependency>
	   
		<!-- Add dependency to the cglib framework - TU with cglib proxified objects -->
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>${cglib.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- Add dependency to the log framework -->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>${log4j.version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
            <scope>runtime</scope>
        </dependency>
        <!-- 	-> With slf4j, users choose a concrete logging implementation at deploy time-->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-jdk14</artifactId>
            <version>${slf4j.version}</version>
            <optional>true</optional>
            <scope>runtime</scope>
        </dependency>
	</dependencies>	
	
	<reporting>
		<plugins>
			<!-- Static analysis with bad practices detection -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>findbugs-maven-plugin</artifactId>
				<version>${findbugs.version}</version>
				<configuration>
					<xmlOutput>true</xmlOutput>
					<!-- Optional derectory to put findbugs xdoc xml report -->
					<xmlOutputDirectory>target/site</xmlOutputDirectory>
                    <effort>Max</effort>
				</configuration>
			</plugin>
			
			<!-- Javadoc with UML diagramms -->
			<plugin>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.8</version>
				<reportSets>
					<reportSet>
						<id>html</id>
						<reports>
							<report>javadoc</report>
						</reports>
					</reportSet>
					<reportSet>
						<id>umlgraph</id>
						<configuration>
							<doclet>org.umlgraph.doclet.UmlGraphDoc</doclet>
							<docletArtifact>
								<groupId>org.umlgraph</groupId>
								<artifactId>doclet</artifactId>
								<version>5.1</version>
							</docletArtifact>
							<additionalparam>
								-inferrel -inferdep -quiet -hide java.*
								-collpackages java.util.*
								-qualify -postfixpackage 
								-nodefontsize 9 -nodefontpackagesize 7
							</additionalparam>
							<useStandardDocletOptions>false</useStandardDocletOptions>

							<!-- Other dir than apidocs -->
							<destDir>umldoc</destDir>

							<!-- For the project-reports page-->
							<name>UML Javadoc</name>
							<description>Javadoc with UML documentation.</description>
						</configuration>
						<reports>
							<report>javadoc</report>
						</reports>
					</reportSet>
				</reportSets>
				<configuration>
					<charset>UTF-8</charset>
					<docencoding>UTF-8</docencoding>
					<docfilessubdirs>true</docfilessubdirs>
					<links>
						<link>http://java.sun.com/j2se/1.5.0/docs/api/</link>
      					<link>http://plexus.codehaus.org/ref/1.0-alpha-9/apidocs</link>
					</links>
					<source>1.5</source>
					<sourcepath>${basedir}/src/main/java/com/b14/qdb</sourcepath>
					<reportOutputDirectory>${project.reporting.outputDirectory}/javadocs</reportOutputDirectory>
					<destDir>javadocs</destDir>
					<excludePackageNames>com.b14.qdb.jni</excludePackageNames>
					<show>private</show>
					<nohelp>true</nohelp>
				</configuration>
			</plugin>
			
			<!-- Static code analysis and copy/paste detector -->
			<plugin>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>2.5</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>pmd</report>
							<report>cpd</report>
						</reports>
					</reportSet>
				</reportSets>
				<configuration>
					<targetJdk>1.5</targetJdk>
					<linkXref>true</linkXref>
					<sourceEncoding>utf-8</sourceEncoding>
					<minimumTokens>20</minimumTokens>
					<excludes>
						<exclude>**/*Test.java</exclude>
						<exclude>**/jni/*.java</exclude>
					</excludes>
				</configuration>
			</plugin>
			
			<!-- Code coverage tools : -->
			<!--   -> Cobertura must be called before emma -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
			</plugin>
			
			<!--   -> Emma code coverage tools -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>emma-maven-plugin</artifactId>
				<version>1.0-alpha-3</version>
				<inherited>true</inherited>
			</plugin>
			
			<!-- Unit tests rapport -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>2.5</version>
				<inherited>true</inherited>
				<configuration>
          			<parallel>methods</parallel>
          			<threadCount>25</threadCount>
          			<argLine>${tests-argsline}</argLine>
        		</configuration>
			</plugin>
			
			<!-- Source code linker -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jxr-plugin</artifactId>
				<version>2.3</version>
				<configuration>
					<aggregate>true</aggregate>
					<linkJavadoc>true</linkJavadoc>
					<javadocDir>./target/site/apidocs</javadocDir>
					<includes>
						<include>**/Qdb*.java</include>
					</includes>
					<excludes>
						<exclude>**/jni/*.java</exclude>
						<exclude>**/*Test.java</exclude>
					</excludes>
				</configuration>
			</plugin>
			
			<!-- License analysis -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>rat-maven-plugin</artifactId>
				<configuration>
					<includes>
						<include>pom.xml</include>
						<include>src/main/**</include>
					</includes>
					<licenses>
						<license implementation="org.apache.rat.analysis.license.SimplePatternBasedLicense">
							<licenseFamilyCategory>B14WL</licenseFamilyCategory>
							<licenseFamilyName>Bureau 14 Qdb License (B14WML) 1.0</licenseFamilyName>
							<notes></notes>
							<patterns>
								<pattern>Copyright (c) 2009-2011, Bureau 14 SARL</pattern>
							</patterns>
						</license>
					</licenses>
					<licenseFamilies>
            			<licenseFamily implementation="org.apache.rat.license.SimpleLicenseFamily">
              				<familyName>Bureau 14 Qdb License (B14WML) 1.0</familyName>
            			</licenseFamily>
          			</licenseFamilies>
				</configuration>
			</plugin>
			
			<!-- Coding conventions checks -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<excludes></excludes>
					<configLocation>config/sun_checks.xml</configLocation>
				</configuration>
			</plugin>
			
			<!-- Collect some code metrics like lines count, cyclomatic complexity -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>javancss-maven-plugin</artifactId>
				<version>2.0</version>
			</plugin>
			
			<!-- Compute graph dependencies -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>jdepend-maven-plugin</artifactId>
			</plugin>
			
			<!-- Make TODO list -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>taglist-maven-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<aggregate>true</aggregate>
					<tags>
						<tag>TODO</tag>
						<tag>FIXME</tag>
					</tags>
				</configuration>
			</plugin>

			<!-- Localisation effort -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>l10n-maven-plugin</artifactId>
				<version>1.0-alpha-2</version>
				<configuration>
					<locales>
						<locale>en</locale>
						<locale>fr</locale>
						<locale>de</locale>
					</locales>
				</configuration>
			</plugin>

			<!-- Collect ckjm metrics -->
			<plugin>
				<groupId>net.sourceforge.ckjm</groupId>
				<artifactId>maven-ckjm-plugin</artifactId>
				<version>0.4</version>
			</plugin>

			<!-- Aggregate some metrics in one view -->
			<plugin>
				<groupId>net.sf.xradar</groupId>
				<artifactId>maven-xradar-plugin</artifactId>
				<version>1.2.2</version>
				<configuration>
					<autoRadar>false</autoRadar> <!--need to be set at false-->
					<javadocEnabled>true</javadocEnabled>
					<reportPmd>${project.build.directory}/pmd.xml</reportPmd>
					<reportCpd>${project.build.directory}/cpd.xml</reportCpd>
					<reportCheckstyle>${project.build.directory}/checkstyle-result.xml</reportCheckstyle>
					<reportCkjm>${project.build.directory}/ckjm-report.xml</reportCkjm>
					<reportJavancss>${project.build.directory}/javancss-raw-report.xml</reportJavancss>
					<reportJdepend>${project.build.directory}/jdepend-report.xml</reportJdepend>
					<reportFindBugs>${project.build.directory}/findbugsXml.xml</reportFindBugs>
					<reportEmma>${project.build.directory}/site/emma/coverage.xml</reportEmma>
					<reportJUnit>${project.build.directory}/surefire-reports/junit.xml</reportJUnit>
				</configuration>
			</plugin>

			<!-- Analyze jar differences between 2 versions -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>clirr-maven-plugin</artifactId>
				<configuration>
					<minSeverity>info</minSeverity>
				</configuration>
			</plugin>

			<!-- Analyze testability of the project ********** DONT WORK NOW ********** -->
<!--			<plugin>-->
<!--            	<groupId>com.google.testability-explorer</groupId>-->
<!--            	<artifactId>maven-testability-plugin</artifactId>-->
<!--            	<version>1.3.3</version>-->
<!--         	</plugin>-->
		</plugins>
	</reporting>	
	
	<build>
<!-- 		<sourceDirectory>${source-dir}</sourceDirectory> -->
<!-- 		<testSourceDirectory>${tests-source-dir}</testSourceDirectory> -->
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.codehaus.plexus</groupId>
					<artifactId>plexus-component-metadata</artifactId>
					<version>1.5.5</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-clean-plugin</artifactId>
					<version>2.2</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-site-plugin</artifactId>
					<version>3.0</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>2.2.1</version>
				</plugin>
				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											properties-maven-plugin
										</artifactId>
										<versionRange>
											[1.0-alpha-2,)
										</versionRange>
										<goals>
											<goal>
												read-project-properties
											</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		
        <plugins>
        	<!-- Read project properties -->
			<plugin>
	        	<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
				<version>1.0-alpha-2</version>
	        	<executions>
	         		<execution>
	            		<phase>initialize</phase>
	            		<goals>
	              			<goal>read-project-properties</goal>
	            		</goals>
	            		<configuration>
	              			<files>
	                			<file>${basedir}/src/etc/project.properties</file>
	              			</files>
	            		</configuration>
	          		</execution>
	        	</executions>
	      	</plugin>
	      	
	      	<!-- Replace version tag in source code -->
	      	<plugin>
	            <groupId>com.google.code.maven-replacer-plugin</groupId>
	            <artifactId>replacer</artifactId>
	            <version>1.5.2</version>
	            <executions>                
	                <execution>
	                    <phase>prepare-package</phase>
	                    <goals>
	                        <goal>replace</goal>
	                    </goals>
	                </execution>
	            </executions>
	            <configuration>
	                <includes>
	                    <include>**/*.java</include>
	                </includes>
	                <token>\@version.*</token>
	                <value>@version ${project.version}</value>
	            </configuration>
	        </plugin>
	      	
	      	<!-- Packaging API in one jar without dependencies -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
						</manifest>
						<manifestEntries>
							<mode>release</mode>
							<url>${project.url}</url>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>
			
			<!-- Packaging a jar containing tests -->
			<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
						</manifest>
						<manifestEntries>
							<mode>release</mode>
							<url>${project.url}</url>
						</manifestEntries>
					</archive>
				</configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>test-jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            
	      	<!-- Compiling project -->
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.2</version>
                <inherited>true</inherited>
                <configuration>
                   	<showDeprecation>true</showDeprecation>
					<showWarnings>true</showWarnings>
					<optimize>true</optimize>
					<source>1.5</source>
					<target>1.5</target>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>2.0.3</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <phase>package</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.8</version>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

			<!-- Launching unit tests : -->
			<!--   *** WARNING : a qdb instance must be launched in localhost *** -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.9</version>
				<configuration>
					<argLine>${tests-argsline}</argLine>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>org.apache.maven.surefire</groupId>
						<artifactId>surefire-junit47</artifactId>
						<version>2.9</version>
					</dependency>
				</dependencies>
			</plugin>
			
			<!-- Add a license header if not exists -->
			<plugin>
            	<groupId>com.mycila.maven-license-plugin</groupId>
            	<artifactId>maven-license-plugin</artifactId>
            	<configuration>
            		<strictChecking>true</strictChecking>
            		<basedir>${basedir}</basedir>
                	<header>${basedir}/src/etc/header.txt</header>
                	<quiet>false</quiet>
                	<encoding>UTF-8</encoding>
                	<includes>
                    	<include>src/**</include>
                    	<include>**/test/**</include>
                	</includes>
                	<excludes>
                    	<exclude>target/**</exclude>
                    	<exclude>src/etc/**</exclude>
                    	<exclude>src/site/**</exclude>
                    	<exclude>.clover/**</exclude>
                	</excludes>
            	</configuration>
        	</plugin>
        	
        	<!-- Draw dependencies graph of project -->
			<plugin>
				<groupId>org.fusesource.mvnplugins</groupId>
				<artifactId>maven-graph-plugin</artifactId>
				<version>1.9</version>
			</plugin>

			<!-- Build one big jar -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>1.4</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<finalName>${uberjar-name}</finalName>
              				<shadedArtifactAttached>true</shadedArtifactAttached>
              				<shadedClassifierName>all</shadedClassifierName>
							<!-- Copying native librairies : -->
							<transformers>
								<!-- 	-> Linux -->
								<transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
									<resource>${lib-linux-dir}/libgcc_s.so.1</resource>
									<file>${lib-linux-dir}/libgcc_s.so.1</file>
								</transformer>
								<transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
									<resource>${lib-linux-dir}/libtbb.so.2</resource>
									<file>${lib-linux-dir}/libtbb.so.2</file>
								</transformer>
								<transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
									<resource>${lib-linux-dir}/libtbbmalloc.so.2</resource>
									<file>${lib-linux-dir}/libtbbmalloc.so.2</file>
								</transformer>
								<transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
									<resource>${lib-linux-dir}/libqdb_api.so</resource>
									<file>${lib-linux-dir}/libqdb_api.so</file>
								</transformer>
								<transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
									<resource>${lib-linux-dir}/libqdb_java_api.so</resource>
									<file>${lib-linux-dir}/libqdb_java_api.so</file>
								</transformer>
								<!-- 	-> BSD -->
								<transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
									<resource>${lib-bsd-dir}/libgcc_s.so.1</resource>
									<file>${lib-bsd-dir}/libgcc_s.so.1</file>
								</transformer>
								<transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
									<resource>${lib-bsd-dir}/libtbb.so</resource>
									<file>${lib-bsd-dir}/libtbb.so</file>
								</transformer>
								<transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
									<resource>${lib-bsd-dir}/libtbbmalloc.so</resource>
									<file>${lib-bsd-dir}/libtbbmalloc.so</file>
								</transformer>
								<transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
									<resource>${lib-bsd-dir}/libqdb_api.so</resource>
									<file>${lib-bsd-dir}/libqdb_api.so</file>
								</transformer>
								<transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
									<resource>${lib-bsd-dir}/libqdb_java_api.so</resource>
									<file>${lib-bsd-dir}/libqdb_java_api.so</file>
								</transformer>
								<!-- 	-> Windows 64 bits -->
								<transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
									<resource>${lib-win64-dir}/msvcp100.dll</resource>
									<file>${lib-win64-dir}/msvcp100.dll</file>
								</transformer>
								<transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
									<resource>${lib-win64-dir}/msvcr100.dll</resource>
									<file>${lib-win64-dir}/msvcr100.dll</file>
								</transformer>
								<transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
									<resource>${lib-win64-dir}/tbb.dll</resource>
									<file>${lib-win64-dir}/tbb.dll</file>
								</transformer>
								<transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
									<resource>${lib-win64-dir}/tbbmalloc.dll</resource>
									<file>${lib-win64-dir}/tbbmalloc.dll</file>
								</transformer>
								<transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
									<resource>${lib-win64-dir}/qdb_api.dll</resource>
									<file>${lib-win64-dir}/qdb_api.dll</file>
								</transformer>
								<transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
									<resource>${lib-win64-dir}/qdb_java_api.dll</resource>
									<file>${lib-win64-dir}/qdb_java_api.dll</file>
								</transformer>
								<!-- 	-> Windows 32 bits -->
								<transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
									<resource>${lib-win32-dir}/msvcp100.dll</resource>
									<file>${lib-win32-dir}/msvcp100.dll</file>
								</transformer>
								<transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
									<resource>${lib-win32-dir}/msvcr100.dll</resource>
									<file>${lib-win32-dir}/msvcr100.dll</file>
								</transformer>
								<transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
									<resource>${lib-win32-dir}/tbb.dll</resource>
									<file>${lib-win32-dir}/tbb.dll</file>
								</transformer>
								<transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
									<resource>${lib-win32-dir}/tbbmalloc.dll</resource>
									<file>${lib-win32-dir}/tbbmalloc.dll</file>
								</transformer>
								<transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
									<resource>${lib-win32-dir}/qdb_api.dll</resource>
									<file>${lib-win32-dir}/qdb_api.dll</file>
								</transformer>
								<transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
									<resource>${lib-win32-dir}/qdb_java_api.dll</resource>
									<file>${lib-win32-dir}/qdb_java_api.dll</file>
								</transformer>
							</transformers>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
    </build>

    <profiles>
        <profile>
            <!--Only releases need to be signed. Use mvn -Prelease clean deploy to deploy releases -->
            <id>release</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <version>1.1</version>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
