/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.b14.qdb.jni;

public final class qdb_error_t {
  public final static qdb_error_t error_uninitialized = new qdb_error_t("error_uninitialized", qdbJNI.error_uninitialized_get());
  public final static qdb_error_t error_ok = new qdb_error_t("error_ok", qdbJNI.error_ok_get());
  public final static qdb_error_t error_system = new qdb_error_t("error_system", qdbJNI.error_system_get());
  public final static qdb_error_t error_internal = new qdb_error_t("error_internal", qdbJNI.error_internal_get());
  public final static qdb_error_t error_no_memory = new qdb_error_t("error_no_memory", qdbJNI.error_no_memory_get());
  public final static qdb_error_t error_invalid_protocol = new qdb_error_t("error_invalid_protocol", qdbJNI.error_invalid_protocol_get());
  public final static qdb_error_t error_host_not_found = new qdb_error_t("error_host_not_found", qdbJNI.error_host_not_found_get());
  public final static qdb_error_t error_invalid_option = new qdb_error_t("error_invalid_option", qdbJNI.error_invalid_option_get());
  public final static qdb_error_t error_alias_too_long = new qdb_error_t("error_alias_too_long", qdbJNI.error_alias_too_long_get());
  public final static qdb_error_t error_alias_not_found = new qdb_error_t("error_alias_not_found", qdbJNI.error_alias_not_found_get());
  public final static qdb_error_t error_alias_already_exists = new qdb_error_t("error_alias_already_exists", qdbJNI.error_alias_already_exists_get());
  public final static qdb_error_t error_timeout = new qdb_error_t("error_timeout", qdbJNI.error_timeout_get());
  public final static qdb_error_t error_buffer_too_small = new qdb_error_t("error_buffer_too_small", qdbJNI.error_buffer_too_small_get());
  public final static qdb_error_t error_invalid_command = new qdb_error_t("error_invalid_command", qdbJNI.error_invalid_command_get());
  public final static qdb_error_t error_connection_refused = new qdb_error_t("error_connection_refused", qdbJNI.error_connection_refused_get());
  public final static qdb_error_t error_connection_reset = new qdb_error_t("error_connection_reset", qdbJNI.error_connection_reset_get());
  public final static qdb_error_t error_unexpected_reply = new qdb_error_t("error_unexpected_reply", qdbJNI.error_unexpected_reply_get());
  public final static qdb_error_t error_not_implemented = new qdb_error_t("error_not_implemented", qdbJNI.error_not_implemented_get());
  public final static qdb_error_t error_unstable_hive = new qdb_error_t("error_unstable_hive", qdbJNI.error_unstable_hive_get());
  public final static qdb_error_t error_protocol_error = new qdb_error_t("error_protocol_error", qdbJNI.error_protocol_error_get());
  public final static qdb_error_t error_outdated_topology = new qdb_error_t("error_outdated_topology", qdbJNI.error_outdated_topology_get());
  public final static qdb_error_t error_wrong_peer = new qdb_error_t("error_wrong_peer", qdbJNI.error_wrong_peer_get());
  public final static qdb_error_t error_invalid_version = new qdb_error_t("error_invalid_version", qdbJNI.error_invalid_version_get());
  public final static qdb_error_t error_try_again = new qdb_error_t("error_try_again", qdbJNI.error_try_again_get());
  public final static qdb_error_t error_invalid_argument = new qdb_error_t("error_invalid_argument", qdbJNI.error_invalid_argument_get());
  public final static qdb_error_t error_out_of_bounds = new qdb_error_t("error_out_of_bounds", qdbJNI.error_out_of_bounds_get());
  public final static qdb_error_t error_conflict = new qdb_error_t("error_conflict", qdbJNI.error_conflict_get());
  public final static qdb_error_t error_not_connected = new qdb_error_t("error_not_connected", qdbJNI.error_not_connected_get());
  public final static qdb_error_t error_invalid_handle = new qdb_error_t("error_invalid_handle", qdbJNI.error_invalid_handle_get());
  public final static qdb_error_t error_reserved_alias = new qdb_error_t("error_reserved_alias", qdbJNI.error_reserved_alias_get());
  public final static qdb_error_t error_unmatched_content = new qdb_error_t("error_unmatched_content", qdbJNI.error_unmatched_content_get());
  public final static qdb_error_t error_invalid_iterator = new qdb_error_t("error_invalid_iterator", qdbJNI.error_invalid_iterator_get());
  public final static qdb_error_t error_prefix_too_short = new qdb_error_t("error_prefix_too_short", qdbJNI.error_prefix_too_short_get());
  public final static qdb_error_t error_skipped = new qdb_error_t("error_skipped", qdbJNI.error_skipped_get());

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static qdb_error_t swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + qdb_error_t.class + " with value " + swigValue);
  }

  private qdb_error_t(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private qdb_error_t(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private qdb_error_t(String swigName, qdb_error_t swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static qdb_error_t[] swigValues = { error_uninitialized, error_ok, error_system, error_internal, error_no_memory, error_invalid_protocol, error_host_not_found, error_invalid_option, error_alias_too_long, error_alias_not_found, error_alias_already_exists, error_timeout, error_buffer_too_small, error_invalid_command, error_connection_refused, error_connection_reset, error_unexpected_reply, error_not_implemented, error_unstable_hive, error_protocol_error, error_outdated_topology, error_wrong_peer, error_invalid_version, error_try_again, error_invalid_argument, error_out_of_bounds, error_conflict, error_not_connected, error_invalid_handle, error_reserved_alias, error_unmatched_content, error_invalid_iterator, error_prefix_too_short, error_skipped };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

