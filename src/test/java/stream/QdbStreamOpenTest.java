import java.nio.ByteBuffer;
import java.util.*;
import net.quasardb.qdb.*;
import org.junit.*;

public class QdbStreamOpenTest {
    @Test
    public void doesNotThrow_afterCallingClose() throws Exception {
        QdbStream stream = Helpers.createEmptyStream();

        stream.open(QdbStream.Mode.APPEND).close();
        stream.open(QdbStream.Mode.APPEND);
    }

    @Test
    public void doesNotThrow_whenCalledTwice_inReadMode() throws Exception {
        QdbStream stream = Helpers.createStream();

        stream.open(QdbStream.Mode.READ);
        stream.open(QdbStream.Mode.READ);
    }

    @Test
    public void doesNotThrow_whenCalledTwice_inAppendThenReadMode() {
        QdbStream stream = Helpers.createEmptyStream();

        stream.open(QdbStream.Mode.APPEND);
        stream.open(QdbStream.Mode.READ); // <- throws
    }

    @Test(expected = QdbAliasNotFoundException.class)
    public void throwsAliasNotFound_whenAliasIsRandom() {
        QdbStream stream = Helpers.createEmptyStream();

        stream.open(QdbStream.Mode.READ); // <- throws
    }

    @Test(expected = QdbClusterClosedException.class)
    public void throwsClusterClosed_afterCallingQdbClusterClose() {
        QdbCluster cluster = Helpers.createCluster();
        String alias = Helpers.createUniqueAlias();

        QdbStream stream = cluster.stream(alias);
        cluster.close();
        stream.open(QdbStream.Mode.APPEND); // <- throws
    }

    @Test(expected = QdbIncompatibleTypeException.class)
    public void throwsIncompatibleType_whenEntryIsBlob() {
        String alias = Helpers.createUniqueAlias();
        QdbBlob blob = Helpers.getBlob(alias);
        QdbStream stream = Helpers.getStream(alias);
        ByteBuffer content = Helpers.createSampleData();

        blob.put(content);
        stream.open(QdbStream.Mode.APPEND); // <- throws
    }

    @Test(expected = QdbResourceLockedException.class)
    public void throwsResourceLocked_whenCalledTwice_inAppendMode() {
        QdbStream stream = Helpers.createEmptyStream();

        stream.open(QdbStream.Mode.APPEND);
        stream.open(QdbStream.Mode.APPEND); // <- throws
    }
}
